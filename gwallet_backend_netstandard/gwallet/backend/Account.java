/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package gwallet_backend_netstandard.gwallet.backend;

import mono.embeddinator.*;
import com.sun.jna.*;

public final class Account {
    public static void validateAddress(gwallet_backend_netstandard.gwallet.backend.Currency currency, java.lang.String address) {
        gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_ValidateAddress(currency == null ? null : currency.__object, address);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public static gwallet_backend_netstandard.gwallet.backend.IBlockchainFeeInfo estimateFee(gwallet_backend_netstandard.gwallet.backend.IAccount account, java.math.BigDecimal amount, java.lang.String destination) {
        com.sun.jna.Pointer __ret = gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_EstimateFee(account == null ? null : account.__getObject(), new mono.embeddinator.Decimal(amount), destination);
        mono.embeddinator.Runtime.checkExceptions();
        return (__ret == com.sun.jna.Pointer.NULL ? null : new gwallet_backend_netstandard.gwallet.backend.IBlockchainFeeInfoImpl(__ret));
    }

    public static java.lang.String signTransaction(gwallet_backend_netstandard.gwallet.backend.NormalAccount account, java.lang.String destination, gwallet_backend_netstandard.gwallet.backend.TransferAmount amount, gwallet_backend_netstandard.gwallet.backend.IBlockchainFeeInfo transactionMetadata, java.lang.String password) {
        java.lang.String __ret = gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_SignTransaction(account == null ? null : account.__object, destination, amount == null ? null : amount.__object, transactionMetadata == null ? null : transactionMetadata.__getObject(), password);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public static void archive(gwallet_backend_netstandard.gwallet.backend.NormalAccount account, java.lang.String password) {
        gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_Archive(account == null ? null : account.__object, password);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public static java.lang.String sweepArchivedFunds(gwallet_backend_netstandard.gwallet.backend.ArchivedAccount account, java.math.BigDecimal balance, gwallet_backend_netstandard.gwallet.backend.IAccount destination, gwallet_backend_netstandard.gwallet.backend.IBlockchainFeeInfo txMetadata) {
        java.lang.String __ret = gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_SweepArchivedFunds(account == null ? null : account.__object, new mono.embeddinator.Decimal(balance), destination == null ? null : destination.__getObject(), txMetadata == null ? null : txMetadata.__getObject());
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public static java.lang.String sendPayment(gwallet_backend_netstandard.gwallet.backend.NormalAccount account, gwallet_backend_netstandard.gwallet.backend.IBlockchainFeeInfo txMetadata, java.lang.String destination, gwallet_backend_netstandard.gwallet.backend.TransferAmount amount, java.lang.String password) {
        java.lang.String __ret = gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_SendPayment(account == null ? null : account.__object, txMetadata == null ? null : txMetadata.__getObject(), destination, amount == null ? null : amount.__object, password);
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }

    public static void addPublicWatcher(gwallet_backend_netstandard.gwallet.backend.Currency currency, java.lang.String publicAddress) {
        gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_AddPublicWatcher(currency == null ? null : currency.__object, publicAddress);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public static void removePublicWatcher(gwallet_backend_netstandard.gwallet.backend.ReadOnlyAccount account) {
        gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_RemovePublicWatcher(account == null ? null : account.__object);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public static void saveUnsignedTransaction(gwallet_backend_netstandard.gwallet.backend.UnsignedTransactionProposal transProposal, gwallet_backend_netstandard.gwallet.backend.IBlockchainFeeInfo txMetadata, java.lang.String filePath) {
        gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_SaveUnsignedTransaction(transProposal == null ? null : transProposal.__object, txMetadata == null ? null : txMetadata.__getObject(), filePath);
        mono.embeddinator.Runtime.checkExceptions();
    }

    public static boolean getwiped() {
        byte __ret = gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_get_wiped();
        mono.embeddinator.Runtime.checkExceptions();
        return __ret != 0;
    }

    public static void setwiped(boolean value) {
        gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_set_wiped((byte)(value? 1 : 0));
        mono.embeddinator.Runtime.checkExceptions();
    }

    static int getLENGTH_OF_PRIVATE_KEYS() {
        int __ret = gwallet_backend_netstandard.Native_GWallet_Backend_NetStandard.INSTANCE.GWallet_Backend_Account_get_LENGTH_OF_PRIVATE_KEYS();
        mono.embeddinator.Runtime.checkExceptions();
        return __ret;
    }
}
