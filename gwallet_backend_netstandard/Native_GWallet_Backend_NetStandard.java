/**
 * ----------------------------------------------------------------------------
 * <auto-generated>
 * This is autogenerated code by Embeddinator-4000.
 * Do not edit this file or all your changes will be lost after re-generation.
 * </auto-generated>
 * ----------------------------------------------------------------------------
 */
package gwallet_backend_netstandard;

import mono.embeddinator.*;
import com.sun.jna.*;

public interface Native_GWallet_Backend_NetStandard extends com.sun.jna.Library
{
    Native_GWallet_Backend_NetStandard INSTANCE = 
        mono.embeddinator.Runtime.loadLibrary("GWallet.Backend.NetStandard", Native_GWallet_Backend_NetStandard.class);

    public com.sun.jna.Pointer GWallet_Backend_DeserializableValueInfo_new(java.lang.String version, java.lang.String typeName);
    public java.lang.String GWallet_Backend_DeserializableValueInfo_get_Version(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_DeserializableValueInfo_get_TypeName(com.sun.jna.Pointer object);
    public int GWallet_Backend_Currency_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public java.lang.String GWallet_Backend_Currency_ToString(com.sun.jna.Pointer object);
    public byte GWallet_Backend_Currency_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Currency_get_Tag(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Currency_get_BTC();
    public byte GWallet_Backend_Currency_get_IsBTC(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Currency_get_ETH();
    public byte GWallet_Backend_Currency_get_IsETH(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Currency_get_ETC();
    public byte GWallet_Backend_Currency_get_IsETC(com.sun.jna.Pointer object);
    public int GWallet_Backend_Tags_get_BTC();
    public void GWallet_Backend_Tags_set_BTC(int value);
    public int GWallet_Backend_Tags_get_ETH();
    public void GWallet_Backend_Tags_set_ETH(int value);
    public int GWallet_Backend_Tags_get_ETC();
    public void GWallet_Backend_Tags_set_ETC(int value);
    public com.sun.jna.Pointer GWallet_Backend_InsufficientFunds_new();
    public com.sun.jna.Pointer GWallet_Backend_InvalidPassword_new();
    public com.sun.jna.Pointer GWallet_Backend_DestinationEqualToOrigin_new();
    public com.sun.jna.Pointer GWallet_Backend_AddressMissingProperPrefix_new();
    public com.sun.jna.Pointer GWallet_Backend_AddressWithInvalidLength_new(int data0);
    public com.sun.jna.Pointer GWallet_Backend_AddressWithInvalidLength_new_1();
    public int GWallet_Backend_AddressWithInvalidLength_get_Data0(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_AddressWithInvalidChecksum_new(java.lang.String data0);
    public com.sun.jna.Pointer GWallet_Backend_AddressWithInvalidChecksum_new_1();
    public java.lang.String GWallet_Backend_AddressWithInvalidChecksum_get_Data0(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_AccountAlreadyAdded_new();
    public com.sun.jna.Pointer GWallet_Backend_IAccount_get_Currency(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_IAccount_get_PublicAddress(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_ReadOnlyAccount_new(com.sun.jna.Pointer currency, java.lang.String publicAddress);
    public java.lang.String GWallet_Backend_ArchivedAccount_get_PrivateKey(com.sun.jna.Pointer object);
    public mono.embeddinator.Decimal GWallet_Backend_IBlockchainFeeInfo_get_FeeValue(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_TransferAmount_new(mono.embeddinator.Decimal valueToSend, mono.embeddinator.Decimal idealValueRemainingAfterSending);
    public mono.embeddinator.Decimal GWallet_Backend_TransferAmount_get_ValueToSend(com.sun.jna.Pointer object);
    public mono.embeddinator.Decimal GWallet_Backend_TransferAmount_get_IdealValueRemainingAfterSending(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_CachedNetworkData_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_CachedNetworkData_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_CachedNetworkData_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public com.sun.jna.Pointer GWallet_Backend_UnsignedTransactionProposal_new(com.sun.jna.Pointer currency, java.lang.String originAddress, com.sun.jna.Pointer amount, java.lang.String destinationAddress);
    public java.lang.String GWallet_Backend_UnsignedTransactionProposal_ToString(com.sun.jna.Pointer object);
    public byte GWallet_Backend_UnsignedTransactionProposal_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public com.sun.jna.Pointer GWallet_Backend_UnsignedTransactionProposal_get_Currency(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_UnsignedTransactionProposal_get_OriginAddress(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_UnsignedTransactionProposal_get_Amount(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_UnsignedTransactionProposal_get_DestinationAddress(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_ResultInconsistencyException_new(int totalNumberOfSuccesfulResultsObtained, int maxNumberOfConsistentResultsObtained, int numberOfConsistentResultsRequired);
    public java.lang.String GWallet_Backend_Bitcoin_Request_ToString(com.sun.jna.Pointer object);
    public byte GWallet_Backend_Bitcoin_Request_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_Request_get_Id(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Bitcoin_Request_get_Method(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_ServerVersionResult_new(int id, java.lang.String result);
    public java.lang.String GWallet_Backend_Bitcoin_ServerVersionResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_ServerVersionResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_ServerVersionResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_ServerVersionResult_get_Id(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Bitcoin_ServerVersionResult_get_Result(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_new(long confirmed, long unconfirmed);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public long GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_get_Confirmed(com.sun.jna.Pointer object);
    public long GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_get_Unconfirmed(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_new(int id, com.sun.jna.Pointer result);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_get_Id(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_get_Result(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_new(java.lang.String txHash, int txPos, long value, long height);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_TxHash(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_TxPos(com.sun.jna.Pointer object);
    public long GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_Value(com.sun.jna.Pointer object);
    public long GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_Height(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_get_Id(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_new(int id, java.lang.String result);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_get_Id(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_get_Result(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_new(int id, mono.embeddinator.Decimal result);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_get_Id(com.sun.jna.Pointer object);
    public mono.embeddinator.Decimal GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_get_Result(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_new(int id, java.lang.String result);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_get_Id(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_get_Result(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_ErrorInnerResult_new(java.lang.String message, int code);
    public java.lang.String GWallet_Backend_Bitcoin_ErrorInnerResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_ErrorInnerResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_ErrorInnerResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public java.lang.String GWallet_Backend_Bitcoin_ErrorInnerResult_get_Message(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_ErrorInnerResult_get_Code(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_ErrorResult_new(int id, com.sun.jna.Pointer error);
    public java.lang.String GWallet_Backend_Bitcoin_ErrorResult_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_ErrorResult_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_ErrorResult_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public int GWallet_Backend_Bitcoin_ErrorResult_get_Id(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_ErrorResult_get_Error(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_ElectrumServerReturningInternalErrorInJsonResponseException_new(java.lang.String message, int code);
    public int GWallet_Backend_Bitcoin_ElectrumServerReturningInternalErrorInJsonResponseException_get_ErrorCode(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_StratumClient_new(com.sun.jna.Pointer jsonRpcClient);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_StratumClient_BlockchainEstimateFee(com.sun.jna.Pointer object, int numBlocksTarget);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_ServerTooOld_new(java.lang.String data0);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_ServerTooOld_new_1();
    public java.lang.String GWallet_Backend_Bitcoin_ServerTooOld_get_Data0(com.sun.jna.Pointer object);
    public mono.embeddinator.Decimal GWallet_Backend_Bitcoin_MinerFee_CalculateAbsoluteValue(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_MinerFee_get_EstimatedTransactionSizeInBytes(com.sun.jna.Pointer object);
    public mono.embeddinator.Decimal GWallet_Backend_Bitcoin_MinerFee_get_AmountPerKiloByteForFastTransaction(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_OutputInfo_new(long valueInSatoshis, java.lang.String destinationAddress);
    public java.lang.String GWallet_Backend_Bitcoin_OutputInfo_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_OutputInfo_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_OutputInfo_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public long GWallet_Backend_Bitcoin_OutputInfo_get_ValueInSatoshis(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Bitcoin_OutputInfo_get_DestinationAddress(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_RawTransactionOutpoint_new(java.lang.String rawTransaction, int outputIndex);
    public java.lang.String GWallet_Backend_Bitcoin_RawTransactionOutpoint_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_RawTransactionOutpoint_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_RawTransactionOutpoint_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public java.lang.String GWallet_Backend_Bitcoin_RawTransactionOutpoint_get_RawTransaction(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_RawTransactionOutpoint_get_OutputIndex(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Bitcoin_TransactionDraft_ToString(com.sun.jna.Pointer object);
    public int GWallet_Backend_Bitcoin_TransactionDraft_CompareTo(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public byte GWallet_Backend_Bitcoin_TransactionDraft_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_TransactionMetadata_new(com.sun.jna.Pointer fee, com.sun.jna.Pointer transactionDraft);
    public java.lang.String GWallet_Backend_Bitcoin_TransactionMetadata_ToString(com.sun.jna.Pointer object);
    public byte GWallet_Backend_Bitcoin_TransactionMetadata_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_TransactionMetadata_get_Fee(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_TransactionMetadata_get_TransactionDraft(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Bitcoin_BouncyCastleSecureRandomWrapperForNBitcoin_new();
    public mono.embeddinator.Decimal GWallet_Backend_Bitcoin_UnitConversion_FromSatoshiToBtc(long satoshis);
    public long GWallet_Backend_Bitcoin_UnitConversion_FromBtcToSatoshis(mono.embeddinator.Decimal btcAmount);
    public mono.embeddinator.Decimal GWallet_Backend_Bitcoin_UnitConversion_get_HOW_MANY_SATOSHIS_ARE_THERE_IN_ONE_BTC();
    public com.sun.jna.Pointer GWallet_Backend_Client_new(java.lang.String host, int port);
    public java.lang.String GWallet_Backend_Client_Request(com.sun.jna.Pointer object, java.lang.String request);
    public mono.embeddinator.Decimal GWallet_Backend_Ether_MinerFee_CalculateAbsoluteValue(com.sun.jna.Pointer object);
    public long GWallet_Backend_Ether_MinerFee_get_GasPriceInWei(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Ether_MinerFee_get_Currency(com.sun.jna.Pointer object);
    public com.sun.jna.Pointer GWallet_Backend_Ether_TransactionMetadata_new(com.sun.jna.Pointer fee, long transactionCount);
    public java.lang.String GWallet_Backend_Ether_TransactionMetadata_ToString(com.sun.jna.Pointer object);
    public byte GWallet_Backend_Ether_TransactionMetadata_Equals(com.sun.jna.Pointer object, com.sun.jna.Pointer obj);
    public com.sun.jna.Pointer GWallet_Backend_Ether_TransactionMetadata_get_Fee(com.sun.jna.Pointer object);
    public long GWallet_Backend_Ether_TransactionMetadata_get_TransactionCount(com.sun.jna.Pointer object);
    public java.lang.String GWallet_Backend_Ether_Server_BroadcastTransaction(com.sun.jna.Pointer currency, java.lang.String transaction);
    public java.lang.String GWallet_Backend_Ether_Server_get_PUBLIC_WEB3_API_ETH_INFURA_MEW();
    public java.lang.String GWallet_Backend_Ether_Server_get_PUBLIC_WEB3_API_ETH_MEW();
    public java.lang.String GWallet_Backend_Ether_Server_get_PUBLIC_WEB3_API_ETC();
    public java.lang.String GWallet_Backend_Ether_Server_get_exMsg();
    public int GWallet_Backend_Ether_Server_get_NUMBER_OF_CONSISTENT_RESPONSES_TO_TRUST_ETH_SERVER_RESULTS();
    public com.sun.jna.Pointer GWallet_Backend_Ether_ConnectionUnsuccessfulException_new(java.lang.String message);
    public com.sun.jna.Pointer GWallet_Backend_Ether_ServerTimedOutException_new(java.lang.String message);
    public void GWallet_Backend_Infrastructure_SetupSentryHook();
    public java.lang.String GWallet_Backend_Infrastructure_get_sentryUrl();
    public void GWallet_Backend_Account_ValidateAddress(com.sun.jna.Pointer currency, java.lang.String address);
    public com.sun.jna.Pointer GWallet_Backend_Account_EstimateFee(com.sun.jna.Pointer account, mono.embeddinator.Decimal amount, java.lang.String destination);
    public java.lang.String GWallet_Backend_Account_SignTransaction(com.sun.jna.Pointer account, java.lang.String destination, com.sun.jna.Pointer amount, com.sun.jna.Pointer transactionMetadata, java.lang.String password);
    public void GWallet_Backend_Account_Archive(com.sun.jna.Pointer account, java.lang.String password);
    public java.lang.String GWallet_Backend_Account_SweepArchivedFunds(com.sun.jna.Pointer account, mono.embeddinator.Decimal balance, com.sun.jna.Pointer destination, com.sun.jna.Pointer txMetadata);
    public java.lang.String GWallet_Backend_Account_SendPayment(com.sun.jna.Pointer account, com.sun.jna.Pointer txMetadata, java.lang.String destination, com.sun.jna.Pointer amount, java.lang.String password);
    public void GWallet_Backend_Account_AddPublicWatcher(com.sun.jna.Pointer currency, java.lang.String publicAddress);
    public void GWallet_Backend_Account_RemovePublicWatcher(com.sun.jna.Pointer account);
    public void GWallet_Backend_Account_SaveUnsignedTransaction(com.sun.jna.Pointer transProposal, com.sun.jna.Pointer txMetadata, java.lang.String filePath);
    public byte GWallet_Backend_Account_get_wiped();
    public void GWallet_Backend_Account_set_wiped(byte value);
    public int GWallet_Backend_Account_get_LENGTH_OF_PRIVATE_KEYS();
    public com.sun.jna.Pointer GWallet_Backend_Caching_ImportFromJson(java.lang.String cacheData);
    public java.lang.String GWallet_Backend_Caching_ExportToJson(com.sun.jna.Pointer newCachedData);
    public void GWallet_Backend_Caching_SaveSnapshot(com.sun.jna.Pointer newCachedData);
    public java.lang.String GWallet_Backend_Caching_get_lastCacheFile();
    public com.sun.jna.Pointer GWallet_Backend_ConnectionUnsuccessfulException_new(java.lang.String message);
    public com.sun.jna.Pointer GWallet_Backend_ConnectionUnsuccessfulException_new_1();
    public com.sun.jna.Pointer GWallet_Backend_NoResponseReceivedAfterRequestException_new();
    public com.sun.jna.Pointer GWallet_Backend_TlsNotSupportedYetInGWalletException_new();
    public com.sun.jna.Pointer GWallet_Backend_ServerCannotBeResolvedException_new(java.lang.String message);
    public com.sun.jna.Pointer GWallet_Backend_ServerUnresponsiveException_new();
    public java.lang.String GWallet_Backend_Marshalling_get_currentVersion();
    public java.lang.String GWallet_Backend_VersionHelper_CurrentVersion();
    public com.sun.jna.Pointer GWallet_Backend_OptionConverter_new();
    public com.sun.jna.Pointer GWallet_Backend_CustomIdiomaticDuConverter_new();
    public com.sun.jna.Pointer GWallet_Backend_IdiomaticDuConverter_new();
}
