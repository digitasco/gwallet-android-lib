// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by Embeddinator-4000.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "glib.h"
#include "mono_embeddinator.h"
#include "c-support.h"
#include "mscorlib.h"
#include "Newtonsoft.Json.h"
#include "NBitcoin.h"

MONO_EMBEDDINATOR_BEGIN_DECLS

typedef MonoEmbedArray _GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResultArray;
typedef MonoEmbedObject GWallet_Backend_DeserializationException;
typedef MonoEmbedObject GWallet_Backend_VersionMismatchDuringDeserializationException;
typedef MonoEmbedObject GWallet_Backend_SerializableValue_1;
typedef MonoEmbedObject GWallet_Backend_T;
typedef MonoEmbedObject GWallet_Backend_DeserializableValueInfo;
typedef MonoEmbedObject GWallet_Backend_DeserializableValue_1;
typedef MonoEmbedObject GWallet_Backend_Currency;
typedef MonoEmbedObject GWallet_Backend_Tags;
typedef MonoEmbedObject GWallet_Backend_InsufficientFunds;
typedef MonoEmbedObject GWallet_Backend_InvalidPassword;
typedef MonoEmbedObject GWallet_Backend_DestinationEqualToOrigin;
typedef MonoEmbedObject GWallet_Backend_AddressMissingProperPrefix;
typedef MonoEmbedObject GWallet_Backend_AddressWithInvalidLength;
typedef MonoEmbedObject GWallet_Backend_AddressWithInvalidChecksum;
typedef MonoEmbedObject GWallet_Backend_AccountAlreadyAdded;
typedef MonoEmbedObject GWallet_Backend_IAccount;
typedef MonoEmbedObject GWallet_Backend_NormalAccount;
typedef MonoEmbedObject GWallet_Backend_ReadOnlyAccount;
typedef MonoEmbedObject GWallet_Backend_ArchivedAccount;
typedef MonoEmbedObject GWallet_Backend_IBlockchainFeeInfo;
typedef MonoEmbedObject GWallet_Backend_TransferAmount;
typedef MonoEmbedObject GWallet_Backend_NotFresh_1;
typedef MonoEmbedObject GWallet_Backend_Cached;
typedef MonoEmbedObject GWallet_Backend_MaybeCached_1;
typedef MonoEmbedObject GWallet_Backend_NotFresh;
typedef MonoEmbedObject GWallet_Backend_Fresh;
typedef MonoEmbedObject GWallet_Backend_CachedNetworkData;
typedef MonoEmbedObject GWallet_Backend_UnsignedTransactionProposal;
typedef MonoEmbedObject GWallet_Backend_UnsignedTransaction_1;
typedef MonoEmbedObject GWallet_Backend_SignedTransaction_1;
typedef MonoEmbedObject GWallet_Backend_NoneAvailableException;
typedef MonoEmbedObject GWallet_Backend_ResultInconsistencyException;
typedef MonoEmbedObject GWallet_Backend_FaultTolerantClient_1;
typedef MonoEmbedObject GWallet_Backend_Client;
typedef MonoEmbedObject GWallet_Backend_Infrastructure;
typedef MonoEmbedObject GWallet_Backend_Account;
typedef MonoEmbedObject GWallet_Backend_Caching;
typedef MonoEmbedObject GWallet_Backend_JsonRpcSharp;
typedef MonoEmbedObject GWallet_Backend_ConnectionUnsuccessfulException;
typedef MonoEmbedObject GWallet_Backend_NoResponseReceivedAfterRequestException;
typedef MonoEmbedObject GWallet_Backend_TlsNotSupportedYetInGWalletException;
typedef MonoEmbedObject GWallet_Backend_ServerRefusedException;
typedef MonoEmbedObject GWallet_Backend_ServerTimedOutException;
typedef MonoEmbedObject GWallet_Backend_ServerCannotBeResolvedException;
typedef MonoEmbedObject GWallet_Backend_ServerUnresponsiveException;
typedef MonoEmbedObject GWallet_Backend_ServerUnreachableException;
typedef MonoEmbedObject GWallet_Backend_Marshalling;
typedef MonoEmbedObject GWallet_Backend_VersionHelper;
typedef MonoEmbedObject GWallet_Backend_Shuffler;
typedef MonoEmbedObject GWallet_Backend_FSharpUtil;
typedef MonoEmbedObject GWallet_Backend_OptionConverter;
typedef MonoEmbedObject GWallet_Backend_CustomIdiomaticDuConverter;
typedef MonoEmbedObject GWallet_Backend_IdiomaticDuConverter;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_Request;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_ServerVersionResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BlockchainTransactionGetResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_ErrorInnerResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_ErrorResult;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_ElectrumServerReturningInternalErrorInJsonResponseException;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_StratumClient;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_ServerTooOld;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_MinerFee;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_OutputInfo;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_RawTransactionOutpoint;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_TransactionDraft;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_TransactionMetadata;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_BouncyCastleSecureRandomWrapperForNBitcoin;
typedef MonoEmbedObject GWallet_Backend_Bitcoin_UnitConversion;
typedef MonoEmbedObject GWallet_Backend_Ether_MinerFee;
typedef MonoEmbedObject GWallet_Backend_Ether_TransactionMetadata;
typedef MonoEmbedObject GWallet_Backend_Ether_Server;
typedef MonoEmbedObject GWallet_Backend_Ether_ConnectionUnsuccessfulException;
typedef MonoEmbedObject GWallet_Backend_Ether_ServerTimedOutException;
typedef MonoEmbedObject GWallet_Backend_Ether_ServerCannotBeResolvedException;

MONO_EMBEDDINATOR_API GWallet_Backend_DeserializableValueInfo* GWallet_Backend_DeserializableValueInfo_new(const char* version, const char* typeName);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_DeserializableValueInfo_get_Version(GWallet_Backend_DeserializableValueInfo* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_DeserializableValueInfo_get_TypeName(GWallet_Backend_DeserializableValueInfo* object);

MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Currency_CompareTo(GWallet_Backend_Currency* object, GWallet_Backend_Currency* obj);
MONO_EMBEDDINATOR_API _StringArray GWallet_Backend_Currency_ToStrings();
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Currency_ToString(GWallet_Backend_Currency* object);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Currency_Equals(GWallet_Backend_Currency* object, GWallet_Backend_Currency* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Currency_get_Tag(GWallet_Backend_Currency* object);
MONO_EMBEDDINATOR_API GWallet_Backend_Currency* GWallet_Backend_Currency_get_BTC();
MONO_EMBEDDINATOR_API bool GWallet_Backend_Currency_get_IsBTC(GWallet_Backend_Currency* object);
MONO_EMBEDDINATOR_API GWallet_Backend_Currency* GWallet_Backend_Currency_get_ETH();
MONO_EMBEDDINATOR_API bool GWallet_Backend_Currency_get_IsETH(GWallet_Backend_Currency* object);
MONO_EMBEDDINATOR_API GWallet_Backend_Currency* GWallet_Backend_Currency_get_ETC();
MONO_EMBEDDINATOR_API bool GWallet_Backend_Currency_get_IsETC(GWallet_Backend_Currency* object);

MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Tags_get_BTC();
MONO_EMBEDDINATOR_API void GWallet_Backend_Tags_set_BTC(int32_t value);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Tags_get_ETH();
MONO_EMBEDDINATOR_API void GWallet_Backend_Tags_set_ETH(int32_t value);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Tags_get_ETC();
MONO_EMBEDDINATOR_API void GWallet_Backend_Tags_set_ETC(int32_t value);

MONO_EMBEDDINATOR_API GWallet_Backend_InsufficientFunds* GWallet_Backend_InsufficientFunds_new();

MONO_EMBEDDINATOR_API GWallet_Backend_InvalidPassword* GWallet_Backend_InvalidPassword_new();

MONO_EMBEDDINATOR_API GWallet_Backend_DestinationEqualToOrigin* GWallet_Backend_DestinationEqualToOrigin_new();

MONO_EMBEDDINATOR_API GWallet_Backend_AddressMissingProperPrefix* GWallet_Backend_AddressMissingProperPrefix_new();

MONO_EMBEDDINATOR_API GWallet_Backend_AddressWithInvalidLength* GWallet_Backend_AddressWithInvalidLength_new(int32_t data0);
MONO_EMBEDDINATOR_API GWallet_Backend_AddressWithInvalidLength* GWallet_Backend_AddressWithInvalidLength_new_1();
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_AddressWithInvalidLength_get_Data0(GWallet_Backend_AddressWithInvalidLength* object);

MONO_EMBEDDINATOR_API GWallet_Backend_AddressWithInvalidChecksum* GWallet_Backend_AddressWithInvalidChecksum_new(const char* data0);
MONO_EMBEDDINATOR_API GWallet_Backend_AddressWithInvalidChecksum* GWallet_Backend_AddressWithInvalidChecksum_new_1();
MONO_EMBEDDINATOR_API const char* GWallet_Backend_AddressWithInvalidChecksum_get_Data0(GWallet_Backend_AddressWithInvalidChecksum* object);

MONO_EMBEDDINATOR_API GWallet_Backend_AccountAlreadyAdded* GWallet_Backend_AccountAlreadyAdded_new();

MONO_EMBEDDINATOR_API GWallet_Backend_Currency* GWallet_Backend_IAccount_get_Currency(GWallet_Backend_IAccount* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_IAccount_get_PublicAddress(GWallet_Backend_IAccount* object);

MONO_EMBEDDINATOR_API GWallet_Backend_ReadOnlyAccount* GWallet_Backend_ReadOnlyAccount_new(GWallet_Backend_Currency* currency, const char* publicAddress);

MONO_EMBEDDINATOR_API const char* GWallet_Backend_ArchivedAccount_get_PrivateKey(GWallet_Backend_ArchivedAccount* object);

MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_IBlockchainFeeInfo_get_FeeValue(GWallet_Backend_IBlockchainFeeInfo* object);

MONO_EMBEDDINATOR_API GWallet_Backend_TransferAmount* GWallet_Backend_TransferAmount_new(MonoDecimal valueToSend, MonoDecimal idealValueRemainingAfterSending);
MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_TransferAmount_get_ValueToSend(GWallet_Backend_TransferAmount* object);
MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_TransferAmount_get_IdealValueRemainingAfterSending(GWallet_Backend_TransferAmount* object);

MONO_EMBEDDINATOR_API const char* GWallet_Backend_CachedNetworkData_ToString(GWallet_Backend_CachedNetworkData* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_CachedNetworkData_CompareTo(GWallet_Backend_CachedNetworkData* object, GWallet_Backend_CachedNetworkData* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_CachedNetworkData_Equals(GWallet_Backend_CachedNetworkData* object, GWallet_Backend_CachedNetworkData* obj);

MONO_EMBEDDINATOR_API GWallet_Backend_UnsignedTransactionProposal* GWallet_Backend_UnsignedTransactionProposal_new(GWallet_Backend_Currency* currency, const char* originAddress, GWallet_Backend_TransferAmount* amount, const char* destinationAddress);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_UnsignedTransactionProposal_ToString(GWallet_Backend_UnsignedTransactionProposal* object);
MONO_EMBEDDINATOR_API bool GWallet_Backend_UnsignedTransactionProposal_Equals(GWallet_Backend_UnsignedTransactionProposal* object, GWallet_Backend_UnsignedTransactionProposal* obj);
MONO_EMBEDDINATOR_API GWallet_Backend_Currency* GWallet_Backend_UnsignedTransactionProposal_get_Currency(GWallet_Backend_UnsignedTransactionProposal* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_UnsignedTransactionProposal_get_OriginAddress(GWallet_Backend_UnsignedTransactionProposal* object);
MONO_EMBEDDINATOR_API GWallet_Backend_TransferAmount* GWallet_Backend_UnsignedTransactionProposal_get_Amount(GWallet_Backend_UnsignedTransactionProposal* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_UnsignedTransactionProposal_get_DestinationAddress(GWallet_Backend_UnsignedTransactionProposal* object);

MONO_EMBEDDINATOR_API GWallet_Backend_ResultInconsistencyException* GWallet_Backend_ResultInconsistencyException_new(int32_t totalNumberOfSuccesfulResultsObtained, int32_t maxNumberOfConsistentResultsObtained, int32_t numberOfConsistentResultsRequired);

MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_Request_ToString(GWallet_Backend_Bitcoin_Request* object);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_Request_Equals(GWallet_Backend_Bitcoin_Request* object, GWallet_Backend_Bitcoin_Request* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_Request_get_Id(GWallet_Backend_Bitcoin_Request* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_Request_get_Method(GWallet_Backend_Bitcoin_Request* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_ServerVersionResult* GWallet_Backend_Bitcoin_ServerVersionResult_new(int32_t id, const char* result);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_ServerVersionResult_ToString(GWallet_Backend_Bitcoin_ServerVersionResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_ServerVersionResult_CompareTo(GWallet_Backend_Bitcoin_ServerVersionResult* object, GWallet_Backend_Bitcoin_ServerVersionResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_ServerVersionResult_Equals(GWallet_Backend_Bitcoin_ServerVersionResult* object, GWallet_Backend_Bitcoin_ServerVersionResult* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_ServerVersionResult_get_Id(GWallet_Backend_Bitcoin_ServerVersionResult* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_ServerVersionResult_get_Result(GWallet_Backend_Bitcoin_ServerVersionResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_new(int64_t confirmed, int64_t unconfirmed);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_ToString(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_CompareTo(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* object, GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_Equals(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* object, GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* obj);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_get_Confirmed(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* object);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult_get_Unconfirmed(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_new(int32_t id, GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* result);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_ToString(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_CompareTo(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* object, GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_Equals(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* object, GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_get_Id(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* object);
MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceInnerResult* GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult_get_Result(GWallet_Backend_Bitcoin_BlockchainAddressGetBalanceResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_new(const char* txHash, int32_t txPos, int64_t value, int64_t height);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_ToString(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_CompareTo(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* object, GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_Equals(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* object, GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* obj);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_TxHash(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_TxPos(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* object);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_Value(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* object);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult_get_Height(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_new(int32_t id, _GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResultArray result);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_ToString(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_CompareTo(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* object, GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_Equals(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* object, GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_get_Id(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* object);
MONO_EMBEDDINATOR_API _GWallet_Backend_Bitcoin_BlockchainAddressListUnspentInnerResultArray GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult_get_Result(GWallet_Backend_Bitcoin_BlockchainAddressListUnspentResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_new(int32_t id, const char* result);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_ToString(GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_CompareTo(GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* object, GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_Equals(GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* object, GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_get_Id(GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainTransactionGetResult_get_Result(GWallet_Backend_Bitcoin_BlockchainTransactionGetResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_new(int32_t id, MonoDecimal result);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_ToString(GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_CompareTo(GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* object, GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_Equals(GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* object, GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_get_Id(GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* object);
MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult_get_Result(GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_new(int32_t id, const char* result);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_ToString(GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_CompareTo(GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* object, GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_Equals(GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* object, GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_get_Id(GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult_get_Result(GWallet_Backend_Bitcoin_BlockchainTransactionBroadcastResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_ErrorInnerResult* GWallet_Backend_Bitcoin_ErrorInnerResult_new(const char* message, int32_t code);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_ErrorInnerResult_ToString(GWallet_Backend_Bitcoin_ErrorInnerResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_ErrorInnerResult_CompareTo(GWallet_Backend_Bitcoin_ErrorInnerResult* object, GWallet_Backend_Bitcoin_ErrorInnerResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_ErrorInnerResult_Equals(GWallet_Backend_Bitcoin_ErrorInnerResult* object, GWallet_Backend_Bitcoin_ErrorInnerResult* obj);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_ErrorInnerResult_get_Message(GWallet_Backend_Bitcoin_ErrorInnerResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_ErrorInnerResult_get_Code(GWallet_Backend_Bitcoin_ErrorInnerResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_ErrorResult* GWallet_Backend_Bitcoin_ErrorResult_new(int32_t id, GWallet_Backend_Bitcoin_ErrorInnerResult* error);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_ErrorResult_ToString(GWallet_Backend_Bitcoin_ErrorResult* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_ErrorResult_CompareTo(GWallet_Backend_Bitcoin_ErrorResult* object, GWallet_Backend_Bitcoin_ErrorResult* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_ErrorResult_Equals(GWallet_Backend_Bitcoin_ErrorResult* object, GWallet_Backend_Bitcoin_ErrorResult* obj);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_ErrorResult_get_Id(GWallet_Backend_Bitcoin_ErrorResult* object);
MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_ErrorInnerResult* GWallet_Backend_Bitcoin_ErrorResult_get_Error(GWallet_Backend_Bitcoin_ErrorResult* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_ElectrumServerReturningInternalErrorInJsonResponseException* GWallet_Backend_Bitcoin_ElectrumServerReturningInternalErrorInJsonResponseException_new(const char* message, int32_t code);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_ElectrumServerReturningInternalErrorInJsonResponseException_get_ErrorCode(GWallet_Backend_Bitcoin_ElectrumServerReturningInternalErrorInJsonResponseException* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_StratumClient* GWallet_Backend_Bitcoin_StratumClient_new(GWallet_Backend_Client* jsonRpcClient);
MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BlockchainEstimateFeeResult* GWallet_Backend_Bitcoin_StratumClient_BlockchainEstimateFee(GWallet_Backend_Bitcoin_StratumClient* object, int32_t numBlocksTarget);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_ServerTooOld* GWallet_Backend_Bitcoin_ServerTooOld_new(const char* data0);
MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_ServerTooOld* GWallet_Backend_Bitcoin_ServerTooOld_new_1();
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_ServerTooOld_get_Data0(GWallet_Backend_Bitcoin_ServerTooOld* object);

MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_Bitcoin_MinerFee_CalculateAbsoluteValue(GWallet_Backend_Bitcoin_MinerFee* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_MinerFee_get_EstimatedTransactionSizeInBytes(GWallet_Backend_Bitcoin_MinerFee* object);
MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_Bitcoin_MinerFee_get_AmountPerKiloByteForFastTransaction(GWallet_Backend_Bitcoin_MinerFee* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_OutputInfo* GWallet_Backend_Bitcoin_OutputInfo_new(int64_t valueInSatoshis, const char* destinationAddress);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_OutputInfo_ToString(GWallet_Backend_Bitcoin_OutputInfo* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_OutputInfo_CompareTo(GWallet_Backend_Bitcoin_OutputInfo* object, GWallet_Backend_Bitcoin_OutputInfo* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_OutputInfo_Equals(GWallet_Backend_Bitcoin_OutputInfo* object, GWallet_Backend_Bitcoin_OutputInfo* obj);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Bitcoin_OutputInfo_get_ValueInSatoshis(GWallet_Backend_Bitcoin_OutputInfo* object);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_OutputInfo_get_DestinationAddress(GWallet_Backend_Bitcoin_OutputInfo* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_RawTransactionOutpoint* GWallet_Backend_Bitcoin_RawTransactionOutpoint_new(const char* rawTransaction, int32_t outputIndex);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_RawTransactionOutpoint_ToString(GWallet_Backend_Bitcoin_RawTransactionOutpoint* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_RawTransactionOutpoint_CompareTo(GWallet_Backend_Bitcoin_RawTransactionOutpoint* object, GWallet_Backend_Bitcoin_RawTransactionOutpoint* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_RawTransactionOutpoint_Equals(GWallet_Backend_Bitcoin_RawTransactionOutpoint* object, GWallet_Backend_Bitcoin_RawTransactionOutpoint* obj);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_RawTransactionOutpoint_get_RawTransaction(GWallet_Backend_Bitcoin_RawTransactionOutpoint* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_RawTransactionOutpoint_get_OutputIndex(GWallet_Backend_Bitcoin_RawTransactionOutpoint* object);

MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_TransactionDraft_ToString(GWallet_Backend_Bitcoin_TransactionDraft* object);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Bitcoin_TransactionDraft_CompareTo(GWallet_Backend_Bitcoin_TransactionDraft* object, GWallet_Backend_Bitcoin_TransactionDraft* obj);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_TransactionDraft_Equals(GWallet_Backend_Bitcoin_TransactionDraft* object, GWallet_Backend_Bitcoin_TransactionDraft* obj);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_TransactionMetadata* GWallet_Backend_Bitcoin_TransactionMetadata_new(GWallet_Backend_Bitcoin_MinerFee* fee, GWallet_Backend_Bitcoin_TransactionDraft* transactionDraft);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Bitcoin_TransactionMetadata_ToString(GWallet_Backend_Bitcoin_TransactionMetadata* object);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Bitcoin_TransactionMetadata_Equals(GWallet_Backend_Bitcoin_TransactionMetadata* object, GWallet_Backend_Bitcoin_TransactionMetadata* obj);
MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_MinerFee* GWallet_Backend_Bitcoin_TransactionMetadata_get_Fee(GWallet_Backend_Bitcoin_TransactionMetadata* object);
MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_TransactionDraft* GWallet_Backend_Bitcoin_TransactionMetadata_get_TransactionDraft(GWallet_Backend_Bitcoin_TransactionMetadata* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Bitcoin_BouncyCastleSecureRandomWrapperForNBitcoin* GWallet_Backend_Bitcoin_BouncyCastleSecureRandomWrapperForNBitcoin_new();

MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_Bitcoin_UnitConversion_FromSatoshiToBtc(int64_t satoshis);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Bitcoin_UnitConversion_FromBtcToSatoshis(MonoDecimal btcAmount);
MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_Bitcoin_UnitConversion_get_HOW_MANY_SATOSHIS_ARE_THERE_IN_ONE_BTC();

MONO_EMBEDDINATOR_API GWallet_Backend_Client* GWallet_Backend_Client_new(const char* host, int32_t port);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Client_Request(GWallet_Backend_Client* object, const char* request);

MONO_EMBEDDINATOR_API MonoDecimal GWallet_Backend_Ether_MinerFee_CalculateAbsoluteValue(GWallet_Backend_Ether_MinerFee* object);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Ether_MinerFee_get_GasPriceInWei(GWallet_Backend_Ether_MinerFee* object);
MONO_EMBEDDINATOR_API GWallet_Backend_Currency* GWallet_Backend_Ether_MinerFee_get_Currency(GWallet_Backend_Ether_MinerFee* object);

MONO_EMBEDDINATOR_API GWallet_Backend_Ether_TransactionMetadata* GWallet_Backend_Ether_TransactionMetadata_new(GWallet_Backend_Ether_MinerFee* fee, int64_t transactionCount);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Ether_TransactionMetadata_ToString(GWallet_Backend_Ether_TransactionMetadata* object);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Ether_TransactionMetadata_Equals(GWallet_Backend_Ether_TransactionMetadata* object, GWallet_Backend_Ether_TransactionMetadata* obj);
MONO_EMBEDDINATOR_API GWallet_Backend_Ether_MinerFee* GWallet_Backend_Ether_TransactionMetadata_get_Fee(GWallet_Backend_Ether_TransactionMetadata* object);
MONO_EMBEDDINATOR_API int64_t GWallet_Backend_Ether_TransactionMetadata_get_TransactionCount(GWallet_Backend_Ether_TransactionMetadata* object);

MONO_EMBEDDINATOR_API const char* GWallet_Backend_Ether_Server_BroadcastTransaction(GWallet_Backend_Currency* currency, const char* transaction);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Ether_Server_get_PUBLIC_WEB3_API_ETH_INFURA_MEW();
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Ether_Server_get_PUBLIC_WEB3_API_ETH_MEW();
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Ether_Server_get_PUBLIC_WEB3_API_ETC();
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Ether_Server_get_exMsg();
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Ether_Server_get_NUMBER_OF_CONSISTENT_RESPONSES_TO_TRUST_ETH_SERVER_RESULTS();

MONO_EMBEDDINATOR_API GWallet_Backend_Ether_ConnectionUnsuccessfulException* GWallet_Backend_Ether_ConnectionUnsuccessfulException_new(const char* message);

MONO_EMBEDDINATOR_API GWallet_Backend_Ether_ServerTimedOutException* GWallet_Backend_Ether_ServerTimedOutException_new(const char* message);

MONO_EMBEDDINATOR_API void GWallet_Backend_Infrastructure_SetupSentryHook();
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Infrastructure_get_sentryUrl();

MONO_EMBEDDINATOR_API void GWallet_Backend_Account_ValidateAddress(GWallet_Backend_Currency* currency, const char* address);
MONO_EMBEDDINATOR_API GWallet_Backend_IBlockchainFeeInfo* GWallet_Backend_Account_EstimateFee(GWallet_Backend_IAccount* account, MonoDecimal amount, const char* destination);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Account_SignTransaction(GWallet_Backend_NormalAccount* account, const char* destination, GWallet_Backend_TransferAmount* amount, GWallet_Backend_IBlockchainFeeInfo* transactionMetadata, const char* password);
MONO_EMBEDDINATOR_API void GWallet_Backend_Account_Archive(GWallet_Backend_NormalAccount* account, const char* password);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Account_SweepArchivedFunds(GWallet_Backend_ArchivedAccount* account, MonoDecimal balance, GWallet_Backend_IAccount* destination, GWallet_Backend_IBlockchainFeeInfo* txMetadata);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Account_SendPayment(GWallet_Backend_NormalAccount* account, GWallet_Backend_IBlockchainFeeInfo* txMetadata, const char* destination, GWallet_Backend_TransferAmount* amount, const char* password);
MONO_EMBEDDINATOR_API void GWallet_Backend_Account_AddPublicWatcher(GWallet_Backend_Currency* currency, const char* publicAddress);
MONO_EMBEDDINATOR_API void GWallet_Backend_Account_RemovePublicWatcher(GWallet_Backend_ReadOnlyAccount* account);
MONO_EMBEDDINATOR_API void GWallet_Backend_Account_SaveUnsignedTransaction(GWallet_Backend_UnsignedTransactionProposal* transProposal, GWallet_Backend_IBlockchainFeeInfo* txMetadata, const char* filePath);
MONO_EMBEDDINATOR_API bool GWallet_Backend_Account_get_wiped();
MONO_EMBEDDINATOR_API void GWallet_Backend_Account_set_wiped(bool value);
MONO_EMBEDDINATOR_API int32_t GWallet_Backend_Account_get_LENGTH_OF_PRIVATE_KEYS();

MONO_EMBEDDINATOR_API GWallet_Backend_CachedNetworkData* GWallet_Backend_Caching_ImportFromJson(const char* cacheData);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Caching_ExportToJson(GWallet_Backend_CachedNetworkData* newCachedData);
MONO_EMBEDDINATOR_API void GWallet_Backend_Caching_SaveSnapshot(GWallet_Backend_CachedNetworkData* newCachedData);
MONO_EMBEDDINATOR_API const char* GWallet_Backend_Caching_get_lastCacheFile();

MONO_EMBEDDINATOR_API GWallet_Backend_ConnectionUnsuccessfulException* GWallet_Backend_ConnectionUnsuccessfulException_new(const char* message);
MONO_EMBEDDINATOR_API GWallet_Backend_ConnectionUnsuccessfulException* GWallet_Backend_ConnectionUnsuccessfulException_new_1();

MONO_EMBEDDINATOR_API GWallet_Backend_NoResponseReceivedAfterRequestException* GWallet_Backend_NoResponseReceivedAfterRequestException_new();

MONO_EMBEDDINATOR_API GWallet_Backend_TlsNotSupportedYetInGWalletException* GWallet_Backend_TlsNotSupportedYetInGWalletException_new();

MONO_EMBEDDINATOR_API GWallet_Backend_ServerCannotBeResolvedException* GWallet_Backend_ServerCannotBeResolvedException_new(const char* message);

MONO_EMBEDDINATOR_API GWallet_Backend_ServerUnresponsiveException* GWallet_Backend_ServerUnresponsiveException_new();

MONO_EMBEDDINATOR_API const char* GWallet_Backend_Marshalling_get_currentVersion();

MONO_EMBEDDINATOR_API const char* GWallet_Backend_VersionHelper_CurrentVersion();

MONO_EMBEDDINATOR_API GWallet_Backend_OptionConverter* GWallet_Backend_OptionConverter_new();

MONO_EMBEDDINATOR_API GWallet_Backend_CustomIdiomaticDuConverter* GWallet_Backend_CustomIdiomaticDuConverter_new();

MONO_EMBEDDINATOR_API GWallet_Backend_IdiomaticDuConverter* GWallet_Backend_IdiomaticDuConverter_new();

MONO_EMBEDDINATOR_END_DECLS
